# -*- coding: utf-8 -*-
"""MovieRecommendationSystem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iHPWIt9E7eehjTuv4uAlcLS1c5kU3NzN
"""

import pandas as pd
import numpy as np
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import seaborn as sns

"""Loading the movies dataset"""

movies = pd.read_csv("movies.csv")
print("Data loaded successfully. Shape:", movies.shape)

"""Check for Missing values in the data"""

print("\nMissing values in each column:")
print(movies.isnull().sum())

"""Visualization of top 10 most common movie genres"""

plt.figure(figsize=(10,6))
movies['genres'].value_counts().head(10).plot(kind='bar')
plt.title('Top Genres in Dataset')
plt.xlabel('Genre')
plt.ylabel('Count')
plt.show()

"""Top 10 Highest-Rated Movies Based on IMDb Scores"""

if 'vote_average' in movies.columns:
    top_rated = movies.sort_values(by='vote_average', ascending=False).head(10)
    print("\nTop 10 IMDb Rated Movies:")
    print(top_rated[['title', 'vote_average']])

    plt.figure(figsize=(10,6))
    sns.barplot(x='vote_average', y='title', data=top_rated, palette='viridis')
    plt.title('Top 10 Movies by IMDb Rating')
    plt.xlabel('IMDb Rating')
    plt.ylabel('Movie Title')
    plt.tight_layout()
    plt.show()
else:
    print("Column 'vote_average' not found in dataset.")

"""Combining text features"""

text_columns = ['genres', 'keywords', 'tagline', 'cast', 'director']
for col in text_columns:
    movies[col] = movies[col].fillna('').astype(str)

features = movies['genres'] + ' ' + movies['keywords'] + ' ' + movies['tagline'] + ' ' + movies['cast'] + ' ' + movies['director']

"""Converting text features into numbers"""

vectorizer = TfidfVectorizer()
feature_vectors = vectorizer.fit_transform(features)

similarity = cosine_similarity(feature_vectors)

"""Interactive Movie Recommendation Based on User Input"""

movie_titles = movies['title'].tolist()

while True:
    user_input = input("\nEnter a movie you like (or type 'exit' to quit): ")
    if user_input.lower() == 'exit':
        break

    matches = difflib.get_close_matches(user_input, movie_titles)

    if not matches:
        print(f"No matches found for '{user_input}'. Try again.")
        continue

    best_match = matches[0]
    movie_index = movies[movies['title'] == best_match].index[0]
    scores = list(enumerate(similarity[movie_index]))
    sorted_scores = sorted(scores, key=lambda x: x[1], reverse=True)[1:11]

    print(f"\nTop 10 movies similar to '{best_match}':")
    for i, (index, score) in enumerate(sorted_scores, 1):
        print(f"{i}. {movies.iloc[index]['title']} (Score: {score:.2f})")